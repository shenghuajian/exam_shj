1. ## Maven的Scope区别和描述

2. ## 描述Spring  @Configuration @Bean @ComponentScan @PropertySource @Value注解

3. ## 什么是SpringBoot,优点和缺点?
>Spring Boot 是 Spring 开源组织下的子项目，是 Spring 组件一站式解决方案，主要是简化了使用 Spring 的难度，简省了繁重的配置，提供了各种启动器，开发者能快速上手。
Spring Boot 主要有如下优点：

>容易上手，提升开发效率，为 Spring 开发提供一个更快、更广泛的入门体验。

>开箱即用，远离繁琐的配置。

>提供了一系列大型项目通用的非业务性功能，例如：内嵌服务器、安全管理、运行数据监控、运行状况检查和外部化配置等。

>没有代码生成，也不需要XML配置。

>避免大量的 Maven 导入和各种版本冲突。

>缺点是集成度较高，使用过程中不太容易了解底层。

>使用了太多运行时的反射和proxy 导致很臃肿 会占用很庞大的服务器内存

>Spring boot 默认使用 Jpa进行sql查询，但是遇到复杂的sql，还是写原生sql比较好
4. ## 什么是yml? 语法格式（说3点)

5. ## SpringBoot(4个注解)并说明其作用

6. ## Spring Boot 的核心注解是哪个？主要由哪几个注解组成的？
>启动类上面的注解是@SpringBootApplication，它也是 Spring Boot 的核心注解，主要组合包含了以下 3 个注解：

>@SpringBootConfiguration：组合了 @Configuration 注解，实现配置文件的功能。

>@EnableAutoConfiguration：打开自动配置的功能，也可以关闭某个自动配置的选项，如关闭数据源自动配置功能： @SpringBootApplication(exclude = { DataSourceAutoConfiguration.class })。

>@ComponentScan：Spring组件扫描。
7. ## Spring-boot-maven-plugin插件作用

8. ## Springboot自动配置的原理
>注解 @EnableAutoConfiguration, @Configuration, @ConditionalOnClass 就是自动配置的核心，

>@EnableAutoConfiguration 给容器导入META-INF/spring.factories 里定义的自动配置类。
筛选有效的自动配置类。

>每一个自动配置类结合对应的 xxxProperties.java 读取配置文件进行自动配置功能
9. ## **Springboot读取配置文件的方式** 

10. ## application 和 bootstrap 配置文件的区别